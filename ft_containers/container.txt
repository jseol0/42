STL: 자료구조와 알고리즘을 사용할수 있도록 제공되는 라이브러리,
	컨테이너 + 이터레이터 + 알고리즘

1. Vector
	: 자동으로 메모리가 할당되는 배열
	-size: 할당된 메모리 안에 들어있는 요소의 갯수
	-capacity: 할당된 메모리 크키
	-재할당 할때는 (기본 메모리 크기 * 2)

	* iterator.end() 는 마지막의 "다음"을 가르킴. (rend()도 마찬가지)
2. Stack	-vector 기반으로 만듬
	: LIFO(후입선출)
	-stack의 push, pop은 vector의 pushback, popback	-즉 stack의 top에서만 이루어짐

3. Map
	: key와 value가 pair 객체로 저장
	 노드 기반으로 만들어진 이진검색트리
	- m.upper_bound(k) : 보다 큰 첫번째 값
	- m.lower_bound(k) : 보다 크거나 같은 첫번째 값
	RBtree
	1. 모든 노드는 빨간색 혹은 검은색이다.
	2. 루트 노드는 검은색이다.
	3. 모든 리프 노드(NIL)들은 검은색이다. (NIL : null leaf, 자료를 갖지 않고 트리의 끝을 나타내는 노드)
	4. 빨간색 노드의 자식은 검은색이다.
	   == No Double Red(빨간색 노드가 연속으로 나올 수 없다)
	5. 모든 리프 노드에서 Black Depth는 같다.
	   == 리프노드에서 루트 노드까지 가는 경로에서 만나는 검은색 노드의 개수가 같다.

	insert case(red-red)
	1. 삽입할 노드의 삼촌노드가 red 일 경우 -> 부모노드 라인을 black으로
	2. 삽입할 노듸의 삼촌노드가 black 일 경우 -> 오름차순 정렬후 중간 노드를 부모노드로 작은노드를 left 큰노드를 right 삼촌노드는 자식노드의 자식노드로

std::allocator
	allocator.allocate 객체를 초기화 하지 않고메모리를 할당
	allocator.construct 초기화되지 않은 공간에 요소를 저장

iterator:  컨테이너에 저장되어 있는 모든 원소들을 전체적으로 훑어 나갈 때 사용하는, 일종의 포인터와 비슷한 객체
iterators_traits: 반복자의 속성을 정의하는 클래스

typedef typename Allocator::reference			reference;
-> Allocator::reference 를 reference라고 별칭할건데 Allocator::reference는 Allocator 클래스 내부의 변수나 함수가 아니라
	 Allocator::reference라는 type이다

explicit

ex)
#include <iostream>
class A{
public:
   int num;
   A(int n) : num(n){};
};
void printA(A a){
   std::cout << a.num << std::endl;
}
int main(){
   int n = 26;
   printA(n);
}

#include <iostream>
class A{
public:
   int num;
   explicit A(int n) : num(n){};
};
void printA(A a){
   std::cout << a.num << std::endl;
}
int main(){
   int n = 26;
   printA(n); //Error!
}
